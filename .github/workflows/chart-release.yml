# Copyright (C) Nicolas Lamirault <nicolas.lamirault@gmail.com>
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# SPDX-License-Identifier: Apache-2.0

name: Charts / Release

on:
  push:
    # branches:
    #   - master
    # paths:
    #   - "charts/**"
    tags:
      - '*'

permissions:
  contents: read

env:
  REGISTRY: ghcr.io

jobs:
  release:
    outputs:
      digest: ${{ steps.get-digest.outputs.digest }}
      image: ${{ env.REGISTRY }}/${{ github.repository_owner }}/charts/${{ steps.chart-details.outputs.release_name }}

    permissions:
      attestations: write # need for Artifact Attestations
      contents: write     # to push chart release and create a release (helm/chart-releaser-action)
      id-token: write     # needed for keyless signing
      packages: write     # needed for ghcr access

    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          fetch-depth: 0

      - name: Get released chart details
        id: chart-details
        run: |
          # Extract chart name and version from tag
          release_name=$(echo -n ${{ github.ref_name }} | awk -F'-v' '{print $1}')
          version=$(echo -n ${{ github.ref_name }} | sed "s/^$release_name-//")

          # Get the chart package created by chart-releaser
          chart_package="${release_name}-${version}.tgz"

          echo "release_name=$release_name" >> $GITHUB_OUTPUT
          echo "version=$version" >> $GITHUB_OUTPUT
          echo "chart_package=$chart_package" >> $GITHUB_OUTPUT

          DESCRIPTION=$(yq -r '.description' charts/${release_name}/Chart.yaml)
          echo "description=$DESCRIPTION" >> $GITHUB_OUTPUT

          CHANGELOG=$(yq -r '.annotations["artifacthub.io/changes"]' charts/${release_name}/Chart.yaml)
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        uses: softprops/action-gh-release@6da8fa9354ddfdc4aeace5fc48d7f679b5214090 # v2.4.1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          tag_name: ${{ steps.chart-details.outputs.release_name }}-${{ steps.chart-details.outputs.version }}
          draft: false
          prerelease: false
          body: |
            ${{ steps.chart-details.outputs.description }}

            ðŸŽ‰ What's Changed

            ${{ steps.chart-details.outputs.changelog }}

      - name: Configure Git
        run: |
          git config user.name "$GITHUB_ACTOR"
          git config user.email "$GITHUB_ACTOR@users.noreply.github.com"

      - name: Install Helm
        uses: azure/setup-helm@v4
        with:
          version: '3.14.0'

      - name: Add dependency chart repos
        run: |
          helm repo add bitnami https://charts.bitnami.com/bitnami
          helm repo add grafana https://grafana.github.io/helm-charts
          helm repo add prometheus-community https://prometheus-community.github.io/helm-charts

      - name: Package Helm chart
        run: |
          helm package charts/${{ steps.chart-details.outputs.release_name }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Push chart to GHCR as OCI artifact
        id: oci-push
        run: |
          chart_name="${{ steps.chart-details.outputs.release_name }}"
          version="${{ steps.chart-details.outputs.version }}"
          chart_package="${{ steps.chart-details.outputs.chart_package }}"

          # Push chart as OCI artifact to GHCR
          helm push ${chart_name}-${version}.tgz oci://${{ env.REGISTRY }}/${{ github.repository_owner }}/charts

          # Calculate digest for attestation
          # oci_ref="${{ env.REGISTRY }}/${{ github.repository_owner }}/charts/${chart_name}:${version}"
          # digest=$(helm show chart oci://${oci_ref} --version ${version} | sha256sum | cut -d' ' -f1)

          # echo "image=${oci_ref}" >> $GITHUB_OUTPUT
          # echo "digest=sha256:${digest}" >> $GITHUB_OUTPUT

      - name: Setup Crane
        uses: imjasonh/setup-crane@31b88efe9de28ae0ffa220711af4b60be9435f6e # v0.4

      - name: Get pushed chart digest
        id: get-digest
        run: |
          digest=$(crane digest ${{ env.REGISTRY }}/${{ github.repository_owner }}/charts/${{ steps.chart-details.outputs.release_name }}:${{ steps.chart-details.outputs.version }})
          echo digest=$digest >> $GITHUB_OUTPUT
          echo $digest

      - name: Install Cosign
        uses: sigstore/cosign-installer@7e8b541eb2e61bf99390e1afd4be13a184e9ebc5 # v3.10.1

      - name: Verify OCI artifact with Cosign
        env:
          IMAGE: ${{ steps.oci-push.outputs.image }}
          DIGEST: ${{ steps.oci-push.outputs.digest }}
        run: |
          # Verify the OCI artifact signature (keyless verification)
          cosign verify \
            --certificate-oidc-issuer https://token.actions.githubusercontent.com \
            --certificate-identity-regexp '^https://github.com/${{ github.repository }}/.github/workflows/.*@refs/.*$' \
            $IMAGE@$DIGEST || echo "No signature found, proceeding with attestation"

      - name: Attest Build Provenance
        uses: actions/attest-build-provenance@977bb373ede98d70efdf65b84cb5f73e068dcc2a # v3.0.0
        with:
          subject-name: ${{ env.REGISTRY }}/${{ github.repository_owner }}/charts/${{ steps.chart-details.outputs.release_name }}
          subject-digest: ${{ steps.get-digest.outputs.digest }}
          push-to-registry: true

  helm-provenance:
    needs:
      - release
    permissions:
      actions: read     # To read the workflow path.
      id-token: write   # To sign the provenance.
      packages: write   # To upload assets to release.
    uses: slsa-framework/slsa-github-generator/.github/workflows/generator_container_slsa3.yml@v2.1.0
    with:
      digest: "${{ needs.release.outputs.digest }}"
      image: "${{ needs.release.outputs.image }}"
      registry-username: ${{ github.actor }}
    secrets:
      registry-password: ${{ secrets.GITHUB_TOKEN }}

  verification-with-cosign:
    needs:
      - release
      - helm-provenance
    runs-on: ubuntu-latest
    permissions: read-all
    steps:
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Install Cosign
        uses: sigstore/cosign-installer@7e8b541eb2e61bf99390e1afd4be13a184e9ebc5 # v3.10.1

      - name: Verify image
        env:
          IMAGE: "${{ needs.release.outputs.image }}"
          DIGEST: ${{ needs.release.outputs.digest }}
        run: |
          cosign verify-attestation \
              --type slsaprovenance \
              --certificate-oidc-issuer https://token.actions.githubusercontent.com \
              --certificate-identity-regexp '^https://github.com/slsa-framework/slsa-github-generator/.github/workflows/generator_container_slsa3.yml@refs/tags/v[0-9]+.[0-9]+.[0-9]+$' \
              $IMAGE@$DIGEST
