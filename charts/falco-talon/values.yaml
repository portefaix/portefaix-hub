# Default values for falco-talon.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 2

# -- Additional labels to add to all resources
additionalLabels: {}
  # app: falco-talon

image:
  registry: falco.docker.scarf.sh
  repository: issif/falco-talon
  tag: latest
  pullPolicy: Always

podSecurityPolicy:
  create: false

podSecurityContext:
  runAsUser: 1234
  fsGroup: 1234

# One or more secrets to be used when pulling images
imagePullSecrets: []
# - registrySecretName

nameOverride: ""

extraEnv:
  - name: LOG_LEVEL
    value: warning
#  - name: AWS_REGION # Specify if running on EKS, ECS or EC2
#    value: us-east-1

priorityClassName: ""

podAnnotations: {}

service:
  type: ClusterIP
  port: 2803
  annotations: {}
    # networking.gke.io/load-balancer-type: Internal

ingress:
  enabled: false
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: falco-talon.local
      paths:
        - path: /
          # -- pathType (e.g. ImplementationSpecific, Prefix, .. etc.)
          # pathType: Prefix

  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

nodeSelector: {}

tolerations: []

affinity: {}

rbac:
  namespaces: ["get"]
  pods: ["get", "update", "patch", "delete", "list"]
  podsEphemeralcontainers: ["patch", "create"]
  nodes: ["get", "update", "patch", "watch", "create"]
  podsExec: ["get", "create"]
  podsEviction: ["get", "create"]
  events: ["get", "update", "patch", "create"]
  daemonsets: ["get", "delete"]
  deployments: ["get", "delete"]
  replicasets: ["get", "delete"]
  statefulsets: ["get", "delete"]
  networkpolicies: ["get", "update", "patch", "create"]
  caliconetworkpolicies: ["get", "update", "patch", "create"]
  ciliumnetworkpolicies: ["get", "update", "patch", "create"]
  roles: ["get", "delete"]
  clusterroles: ["get", "delete"]
  configmaps: ["get", "delete"]
  secrets: ["get", "delete"]
  leases: ["get", "update", "patch", "watch", "create"]

config:
# listenAddress: 0.0.0.0
# listenPort: 2803

  defaultNotifiers: # these notifiers will be enabled for all rules
    #  - slack
    - k8sevents

  watchRules: true # reload if the rules file changes (default: true)

  rulesFiles: # list of locale rules files to use, they will be concatenated into a single config map
    - rules.yaml
    - rules_override.yaml

  deduplication:
    leaderElection: true # enable the leader election for cluster mode
    timeWindowSeconds: 5 # duration in seconds for the deduplication time window

  printAllEvents: false # print in stdout all received events, not only those which match a rule

  # See https://docs.falco-talon.org/docs/notifiers/list/ for the settings
  notifiers:
    slack:
      webhookUrl: ""
      icon: "https://upload.wikimedia.org/wikipedia/commons/2/26/Circaetus_gallicus_claw.jpg"
      username: "Falco Talon"
      footer: "https://github.com/falco-talon/falco-talon"
      format: "long"
    webhook:
      url: ""
    smtp:
      hostPort: ""
      from: ""
      to: ""
      user: ""
      password: ""
      format: "html"
      tls: false
    loki:
      hostPort: ""
      user: ""
      apiKey: ""
      tenant: ""
      customHeaders: []
    elasticsearch:
      url: ""
      createIndexTemplate: true
      numberOfShards: 1
      numberOfReplicas: 1

  aws:
    roleArn: ""
    externalId: ""
    region: "" # if not specified, default region from provider credential chain will be used
    accesKey: "" # if not specified, default access_key from provider credential chain will be used
    secretKey: "" # if not specified, default secret_key from provider credential chain will be used

  minio:
    endpoint: "" # endpoint
    accessKy: "" # access key
    secretKey: "" # secret key
    useSsl: false # Use SSL

# -- serviceMonitor holds the configuration for the ServiceMonitor CRD.
serviceMonitor:
  # -- enable the deployment of a Service Monitor for the Prometheus Operator.
  enabled: false
  # -- path at which the metrics are expose
  path: /metrics
  # -- additionalLabels specifies labels to be added on the Service Monitor.
  additionalLabels: {}
  # -- interval specifies the time interval at which Prometheus should scrape metrics from the service.
  interval: "30s"
  # -- scheme specifies network protocol used by the metrics endpoint. In this case HTTP.
  scheme: http
  # -- scrapeTimeout determines the maximum time Prometheus should wait for a target to respond to a scrape request.
  # If the target does not respond within the specified timeout, Prometheus considers the scrape as failed for
  # that target.
  scrapeTimeout: "10s"
  # -- relabelings configures the relabeling rules to apply the targetâ€™s metadata labels.
  relabelings: []
  # -- targetLabels defines the labels which are transferred from the associated Kubernetes service object onto the ingested metrics.
  targetLabels: []
  # -- tlsConfig specifies TLS (Transport Layer Security) configuration for secure communication when
  # scraping metrics from a service. It allows you to define the details of the TLS connection, such as
  # CA certificate, client certificate, and client key. Currently, the k8s-metacollector does not support
  # TLS configuration for the metrics endpoint.
  tlsConfig: {}
    # insecureSkipVerify: false
    # caFile: /path/to/ca.crt
    # certFile: /path/to/client.crt
    # keyFile: /path/to/client.key