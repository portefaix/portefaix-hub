apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "k8sgpt.fullname" . }}
  namespace: {{ template "k8sgpt.namespace" . }}
  {{- if .Values.additionalAnnotations }}
  annotations:
  {{ toYaml .Values.additionalAnnotations | indent 4 }}
  {{- end }}
  labels:
    app: k8sgpt
    {{- include "k8sgpt.labels" . | indent 4 }}
spec:
  replicas: {{ .Values.replicas }}
  selector:
    matchLabels:
      {{- include "k8sgpt.selectorLabels" . | indent 6 }}
  template:
    metadata:
      labels:
        app: k8sgpt
        {{- include "k8sgpt.labels" . | indent 8 }}
    spec:
      {{- if .Values.nodeSelector }}
      nodeSelector:
      {{ toYaml .Values.nodeSelector | indent 8 }}
      {{- end }}
      {{- if .Values.affinity }}
      affinity:
      {{ toYaml .Values.affinity | indent 8 }}
      {{- end }}
      {{- if .Values.tolerations }}
      tolerations:
      {{ toYaml .Values.tolerations | indent 8 }}
      {{- end }}
      {{- with .Values.securityContext }}
      securityContext:
      {{- toYaml . | nindent 8 }}
      {{- end }}
      restartPolicy: {{ .Values.restartPolicy }}
      serviceAccountName: {{ template "k8sgpt.serviceAccountName" . }}
      {{- if .Values.image.pullSecrets }}
      imagePullSecrets:
      {{- toYaml .Values.image.pullSecrets | nindent 8 }}
      {{- end }}
      containers:
      - name: k8sgpt-container
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
        imagePullPolicy: {{ .Values.image.pullPolicy }}       
        ports:
        - containerPort: 8080
        args: ["serve"]
        {{- with .Values.resources }}
        resources:
          {{- toYaml . | nindent 12 }}
        {{- end }}
        env:
        - name: K8SGPT_MODEL
          value: {{ .Values.chatgpt.model }}
        - name: K8SGPT_BACKEND
          value: {{ .Values.chatgpt.backend }}
        - name: K8SGPT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ .Values.chatgpt.secret.name }}
              key: {{ .Values.chatgpt.secret.key }}
        {{- if .Values.livenessProbe.enabled }}
        livenessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: {{ .Values.livenessProbe.initialDelaySeconds }}
          timeoutSeconds: {{ .Values.livenessProbe.timeoutSeconds }}
        {{- end }}
        {{- if .Values.readinessProbe.enabled }}
        readinessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: {{ .Values.readinessProbe.initialDelaySeconds }}
          timeoutSeconds: {{ .Values.readinessProbe.timeoutSeconds }}
          successThreshold: {{ .Values.readinessProbe.successThreshold }}
          periodSeconds: {{ .Values.readinessProbe.periodSeconds }}
        {{- end }}
        {{- if .Values.securityContext.enabled }}
        {{- with .Values.containerSecurityContext }}
        securityContext:
        {{- toYaml . | nindent 12 }}
        {{- end }}
        {{- end }}